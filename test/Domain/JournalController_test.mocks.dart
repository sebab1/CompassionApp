// Mocks generated by Mockito 5.4.4 from annotations
// in compassion_app/test/Domain/JournalController_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:compassion_app/Data/SqlDatabase.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SqlDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSqlDatabase extends _i1.Mock implements _i3.SqlDatabase {
  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);

  @override
  set db(_i2.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<Map<String, Object?>>> readJournalEvents() =>
      (super.noSuchMethod(
        Invocation.method(
          #readJournalEvents,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i4.Future<List<Map<String, Object?>>>);

  @override
  _i4.Future<void> deleteDatabase() => (super.noSuchMethod(
        Invocation.method(
          #deleteDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addActivity(
    int? entryID,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addActivity,
          [
            entryID,
            content,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> addEntry(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #addEntry,
          [time],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> addIntention(
    int? entryID,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIntention,
          [
            entryID,
            content,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveChecked(
    String? checked,
    int? entryID,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveChecked,
          [
            checked,
            entryID,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
